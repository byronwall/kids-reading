// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// ---- AUTH RELATED THINGS ---- //
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?

    accounts Account[]
    sessions Session[]
    profiles Profile[]
}

// ---- USER DATA RELATED THINGS ---- //

model Profile {
    id     String @id @default(cuid())
    name   String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    results   ProfileQuestionResult[]
    summaries ProfileWordSummary[]
    lessons   ProfileLessonFocus[]
    awards    ProfileAward[]
}

// ---- WORD and CORE DATA ---- //

model Word {
    id   String @id @default(cuid())
    word String

    // this will grow into columns so it's easier to query?
    metaInfo Json

    summaries ProfileWordSummary[]
    sentences Sentence[]
    results   ProfileQuestionResult[]

    // implicitly connect to lessons using a many words : many lessons
    lesson Lesson[]
    awards ProfileAward[]

    @@unique([word])
}

model Sentence {
    id String @id @default(cuid())

    // this will include things like difficulty, etc
    metaInfo Json

    // this will include punctuation
    fullSentence String

    // asume that words will be in the database -- application error if not
    // connect to words using a many sentences : many words
    words   Word[]
    results ProfileQuestionResult[]

    // implicitly connect to lessons using a many sentences : many lessons
    lesson Lesson[]

    // track deletion so sentences are not displayed in new questions
    isDeleted Boolean @default(false)
}

model ProfileQuestionResult {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    // this will grow into columns so it's easier to query?
    metaInfo Json

    // this will be used to group results together
    groupId String @default("")

    profileId String
    profile   Profile @relation(fields: [profileId], references: [id])

    wordId String?
    word   Word?   @relation(fields: [wordId], references: [id])

    sentenceId String?
    sentence   Sentence? @relation(fields: [sentenceId], references: [id])

    // score will range from 0 to 100, 100 being the best
    score Int @default(0)
}

model ProfileWordSummary {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    // this will grow into columns so it's easier to query?
    metaInfo Json

    profileId String
    profile   Profile @relation(fields: [profileId], references: [id])

    wordId String
    word   Word   @relation(fields: [wordId], references: [id])

    // score will start at 100 and increment/decrement when right wrong?
    totalScore Int @default(0)

    // will be determined from a spaced repetition algorithm
    nextReviewDate DateTime @default(now())

    // interval stored in days
    interval Int @default(1)

    // unqiue const on profileId and wordId
    @@unique([profileId, wordId])
}

// ---- LESSON PLANS ---- //

model LearningPlan {
    id String @id @default(cuid())

    name        String
    description String

    order Int

    lessons Lesson[]

    // names must be unique
    @@unique([name])
}

model Lesson {
    id String @id @default(cuid())

    name        String
    description String

    order Int

    LearningPlan   LearningPlan? @relation(fields: [learningPlanId], references: [id])
    learningPlanId String?

    // implicitly connect to words using a many lessons : many words
    words Word[]

    // implicitly connect to sentences using a many lessons : many sentences
    sentences          Sentence[]
    ProfileLessonFocus ProfileLessonFocus[]
    awards             ProfileAward[]
}

model ProfileLessonFocus {
    id String @id @default(cuid())

    profileId String
    profile   Profile @relation(fields: [profileId], references: [id])

    lessonId String
    lesson   Lesson @relation(fields: [lessonId], references: [id])

    isFocused   Boolean @default(false)
    isCompleted Boolean @default(false)

    // unique constraint
    @@unique([profileId, lessonId])
}

// ---- AWARD RELATED ---- //

enum AwardType {
    WORD_COUNT
    SENTENCE_COUNT
    WORD_MASTERY
    LESSON_MASTERY
}

model ProfileAward {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    profileId String
    profile   Profile @relation(fields: [profileId], references: [id])

    awardType String

    // value used for WORD_COUNT and SENTENCE_COUNT
    awardValue Int?

    // used for WORD_MASTERY 
    wordId String?
    word   Word?   @relation(fields: [wordId], references: [id])

    // used for LESSON_MASTERY
    lessonId String?
    lesson   Lesson? @relation(fields: [lessonId], references: [id])

    // will start blank before user makes a choice
    imageId String?
    image   AwardImages? @relation(fields: [imageId], references: [id])
}

model AwardImages {
    id String @id @default(cuid())

    imageUrl String

    metaInfo Json
    awards   ProfileAward[]

    // unique url
    @@unique([imageUrl])
}
